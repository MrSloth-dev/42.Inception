name: Docker Containers Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create required directories
        run: |
          mkdir -p ~/data/mysql/
          mkdir -p ~/data/wordpress/
          chmod -R 777 ~/data/

      - name: Create test secrets
        env:
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          WP_URL: ${{ secrets.WP_URL }}
          WP_HOME: ${{ secrets.WP_HOME }}
          WP_DB_NAME: ${{ secrets.WP_DB_NAME }}
          WP_ADMIN_EMAIL: ${{ secrets.WP_ADMIN_EMAIL }}
          WP_DB_HOST: ${{ secrets.WP_DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          WP_ADMIN_USER: ${{ secrets.WP_ADMIN_USER }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          WP_ADMIN_PASSWORD: ${{ secrets.WP_ADMIN_PASSWORD }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PASV_ADDRESS: ${{ secrets.FTP_PASV_ADDRESS }}
        run: |
          mkdir -p secrets
          echo "$DOMAIN_NAME" > secrets/domain_name
          echo "$WP_URL" > secrets/wp_url
          echo "$WP_HOME" > secrets/wp_home
          echo "$WP_DB_NAME" > secrets/wp_db_name
          echo "$WP_ADMIN_EMAIL" > secrets/wp_admin_email
          echo "$WP_DB_HOST" > secrets/wp_db_host
          echo "$DB_USER" > secrets/db_user
          echo "$WP_ADMIN_USER" > secrets/wp_admin_user
          echo "$DB_ROOT_PASSWORD" > secrets/db_root_password
          echo "$WP_ADMIN_PASSWORD" > secrets/wp_admin_password
          echo "$DB_PASSWORD" > secrets/db_password
          echo "$DB_HOST" > secrets/db_host
          echo "$REDIS_PASSWORD" > secrets/redis_password
          echo "$FTP_USER" > secrets/ftp_user
          echo "$FTP_PASSWORD" > secrets/ftp_password
          echo "$FTP_PASV_ADDRESS" > secrets/ftp_pasv_address
      
      - name: Build Docker images
        run: |
          make build
      
      - name: Start containers
        run: |
          make up
          echo "Waiting for containers to initialize (60 seconds)..."
          sleep 60  # Give containers time to start

      - name: Check running containers and logs
        run: |
          docker ps
          echo "=== WordPress Container Logs ==="
          docker logs wordpress || true
          echo "=== MariaDB Container Logs ==="
          docker logs mariadb || true

      - name: Test MariaDB container
        run: |
          MARIADB_CONTAINER_ID=$(docker ps -q --filter "name=mariadb")
          if [ -z "$MARIADB_CONTAINER_ID" ]; then
            echo "MariaDB container is not running"
            exit 1
          fi
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $MARIADB_CONTAINER_ID)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "MariaDB container is not healthy: $HEALTH_STATUS"
            docker logs $MARIADB_CONTAINER_ID
            exit 1
          fi
          echo "MariaDB container is running and healthy"

      - name: Test WordPress container
        run: |
          WP_CONTAINER_ID=$(docker ps -q --filter "name=wordpress")
          if [ -z "$WP_CONTAINER_ID" ]; then
            echo "WordPress container is not running"
            exit 1
          fi
          if [ "$(docker inspect --format='{{.State.Running}}' $WP_CONTAINER_ID)" != "true" ]; then
            echo "WordPress container is not in running state"
            docker logs $WP_CONTAINER_ID
            exit 1
          fi
          if ! docker exec $WP_CONTAINER_ID test -f /var/www/html/wp-config.php; then
            echo "wp-config.php file is missing in WordPress container"
            DB_PASSWORD=$(cat secrets/db_password)
            DB_USER=$(cat secrets/db_user)
            WP_DB_HOST=$(cat secrets/wp_db_host)
            docker exec $WP_CONTAINER_ID wp config create --dbname=wordpress --dbuser="$DB_USER" --dbpass="$DB_PASSWORD" --dbhost="$WP_DB_HOST" --allow-root
          fi
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $WP_CONTAINER_ID)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "WordPress container has unhealthy status, but we'll continue testing anyway"
            docker exec $WP_CONTAINER_ID ls -la /var/www/html/ || true
          else
            echo "WordPress container is running and healthy"
          fi
          if ! docker exec $WP_CONTAINER_ID pgrep php-fpm > /dev/null; then
            echo "PHP-FPM is not running in WordPress container"
            exit 1
          fi
          echo "WordPress container basic functionality test passed"
      
      - name: Test NGINX container
        run: |
          NGINX_CONTAINER_ID=$(docker ps -q --filter "name=nginx")
          if [ -z "$NGINX_CONTAINER_ID" ]; then
            echo "NGINX container is not running"
            exit 1
          fi
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $NGINX_CONTAINER_ID)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "NGINX container has unhealthy status, checking if process is running"
            if ! docker exec $NGINX_CONTAINER_ID pgrep nginx > /dev/null; then
              echo "NGINX process is not running"
              docker logs $NGINX_CONTAINER_ID
              exit 1
            fi
            echo "NGINX process is running despite unhealthy status"
          else
            echo "NGINX container is running and healthy"
          fi

      - name: Test Redis container
        run: |
          REDIS_CONTAINER_ID=$(docker ps -q --filter "name=redis")
          if [ -z "$REDIS_CONTAINER_ID" ]; then
            echo "Redis container is not running"
            exit 1
          fi
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $REDIS_CONTAINER_ID)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "Redis container has unhealthy status, checking if process is running"
            if ! docker exec $REDIS_CONTAINER_ID pgrep redis-server > /dev/null; then
              echo "Redis server process is not running"
              docker logs $REDIS_CONTAINER_ID
              exit 1
            fi
            echo "Redis server process is running despite unhealthy status"
          else
            echo "Redis container is running and healthy"
          fi
          
          REDIS_PASSWORD=$(cat secrets/redis_password)
          if ! docker exec redis redis-cli -a "$REDIS_PASSWORD" ping | grep -q "PONG"; then
            echo "Redis connection failed"
            exit 1
          fi
          
          RANDOM_VALUE=$RANDOM
          docker exec redis redis-cli -a "$REDIS_PASSWORD" set test_key "$RANDOM_VALUE" > /dev/null
          RETRIEVED_VALUE=$(docker exec redis redis-cli -a "$REDIS_PASSWORD" get test_key)
          if [ "$RETRIEVED_VALUE" != "$RANDOM_VALUE" ]; then
            echo "Redis functionality test failed: Values don't match"
            exit 1
          fi
          echo "Redis container is functional"

      - name: Test Adminer container
        run: |
          ADMINER_CONTAINER_ID=$(docker ps -q --filter "name=adminer")
          if [ -z "$ADMINER_CONTAINER_ID" ]; then
            echo "Adminer container is not running"
            exit 1
          fi
          
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $ADMINER_CONTAINER_ID)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "Adminer container has unhealthy status, checking if processes are running"
            if ! docker exec $ADMINER_CONTAINER_ID pgrep php-fpm8 > /dev/null; then
              echo "PHP-FPM process is not running in Adminer container"
              docker logs $ADMINER_CONTAINER_ID
              exit 1
            fi
            if ! docker exec $ADMINER_CONTAINER_ID pgrep nginx > /dev/null; then
              echo "NGINX process is not running in Adminer container"
              docker logs $ADMINER_CONTAINER_ID
              exit 1
            fi
            echo "Adminer processes are running despite unhealthy status"
          else
            echo "Adminer container is running and healthy"
          fi
          if ! docker exec $ADMINER_CONTAINER_ID curl -s http://localhost:8080/ | grep -q "Adminer"; then
            echo "Adminer web interface is not accessible"
            exit 1
          fi

          DB_USER=$(cat secrets/db_user)
          DB_PASSWORD=$(cat secrets/db_password)
          docker exec $ADMINER_CONTAINER_ID sh -c "echo '<?php
          \$conn = new mysqli(\"mariadb\", \"$DB_USER\", \"$DB_PASSWORD\", \"wordpress\");
          if (\$conn->connect_error) {
            echo \"Connection failed: \" . \$conn->connect_error;
            exit(1);
          }
          echo \"Connected successfully\";
          \$conn->close();
          ?>' > /var/www/html/test-db.php"
          if ! docker exec $ADMINER_CONTAINER_ID php /var/www/html/test-db.php | grep -q "Connected successfully"; then
            echo "Adminer cannot connect to MariaDB"
            exit 1
          fi
          echo "Adminer container is functional and can connect to the database"


      - name: Test FTP container
        run: |
          FTP_CONTAINER_ID=$(docker ps -q --filter "name=ftp")
          if [ -z "$FTP_CONTAINER_ID" ]; then
            echo "FTP container is not running"
            exit 1
          fi

          if ! docker exec $FTP_CONTAINER_ID pgrep vsftpd > /dev/null; then
            echo "vsftpd process is not running in FTP container"
            docker logs $FTP_CONTAINER_ID
            exit 1
          fi

          if ! docker exec $FTP_CONTAINER_ID netstat -tuln | grep -q ":21.*LISTEN"; then
            echo "FTP container is not listening on port 21"
            docker logs $FTP_CONTAINER_ID
            exit 1
          fi


          echo "FTP container is running and the process is active"

          echo "This is a test file for FTP upload from GitHub Actions" > test_upload.txt

          sudo apt-get update && sudo apt-get install -y ftp curl

          FTP_USER=$(cat secrets/ftp_user)
          FTP_PASSWORD=$(cat secrets/ftp_password)

          if ! curl -s --connect-timeout 10 -u "$FTP_USER:$FTP_PASSWORD" ftp://localhost/ > ftp_listing.txt; then
            echo "Failed to connect to FTP server"
            cat ftp_listing.txt
            exit 1
          fi

          if ! curl -s --connect-timeout 10 -T test_upload.txt -u "$FTP_USER:$FTP_PASSWORD" ftp://localhost/; then
            echo "Failed to upload file to FTP server"
            exit 1
          fi

          if ! curl -s --connect-timeout 10 -u "$FTP_USER:$FTP_PASSWORD" ftp://localhost/ | grep -q "test_upload.txt"; then
            echo "Uploaded file not found in FTP directory listing"
            exit 1
          fi

          if ! docker exec wordpress ls -la /var/www/html/ | grep -q "test_upload.txt"; then
            echo "FTP uploaded file not found in WordPress volume"
            exit 1
          fi
          echo "FTP container test successfully completed"
      - name: Test Prometheus container
        run: |
          PROMETHEUS_CONTAINER_ID=$(docker ps -q --filter "name=prometheus")
          if [ -z "$PROMETHEUS_CONTAINER_ID" ]; then
            echo "Prometheus container is not running"
            exit 1
          fi

          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $PROMETHEUS_CONTAINER_ID)
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "Prometheus container has unhealthy status, checking if process is running"
            if ! docker exec $PROMETHEUS_CONTAINER_ID pgrep prometheus > /dev/null; then
              echo "Prometheus process is not running"
              docker logs $PROMETHEUS_CONTAINER_ID
              exit 1
            fi
            echo "Prometheus process is running despite unhealthy status"
          else
            echo "Prometheus container is running and healthy"
          fi

          if ! docker exec $PROMETHEUS_CONTAINER_ID curl -s http://localhost:9090/-/healthy | grep -q "Prometheus"; then
            echo "Prometheus API health check failed"
            exit 1
          fi

          if ! docker exec $PROMETHEUS_CONTAINER_ID curl -s 'http://localhost:9090/api/v1/query?query=up' | grep -q "success"; then
            echo "Prometheus query API test failed"
            exit 1
          fi

          echo "Prometheus container is functional"

      - name: Stop containers
        run: docker compose -f ./srcs/docker-compose.yaml down -v
        if: always()
